"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
export const TSBASETYPE_TYPES = exports.TSTYPE_TYPES = exports.TSTYPEELEMENT_TYPES = exports.JSX_TYPES = exports.ENUMMEMBER_TYPES = exports.ENUMBODY_TYPES = exports.FLOWPREDICATE_TYPES = exports.FLOWDECLARATION_TYPES = exports.FLOWBASEANNOTATION_TYPES = exports.FLOWTYPE_TYPES = exports.FLOW_TYPES = exports.PRIVATE_TYPES = exports.MODULESPECIFIER_TYPES = exports.EXPORTDECLARATION_TYPES = exports.MODULEDECLARATION_TYPES = exports.CLASS_TYPES = exports.PATTERN_TYPES = exports.UNARYLIKE_TYPES = exports.PROPERTY_TYPES = exports.OBJECTMEMBER_TYPES = exports.METHOD_TYPES = exports.USERWHITESPACABLE_TYPES = exports.IMMUTABLE_TYPES = exports.LITERAL_TYPES = exports.TSENTITYNAME_TYPES = exports.LVAL_TYPES = exports.PATTERNLIKE_TYPES = exports.DECLARATION_TYPES = exports.PUREISH_TYPES = exports.FUNCTIONPARENT_TYPES = exports.FUNCTION_TYPES = exports.FORXSTATEMENT_TYPES = exports.FOR_TYPES = exports.EXPRESSIONWRAPPER_TYPES = exports.WHILE_TYPES = exports.LOOP_TYPES = exports.CONDITIONAL_TYPES = exports.COMPLETIONSTATEMENT_TYPES = exports.TERMINATORLESS_TYPES = exports.STATEMENT_TYPES = exports.BLOCK_TYPES = exports.BLOCKPARENT_TYPES = exports.SCOPABLE_TYPES = exports.BINARY_TYPES = exports.EXPRESSION_TYPES = void 0;

import _definitions from '../../definitions';

const EXPRESSION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Expression"];
const BINARY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Binary"];
const SCOPABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Scopable"];
const BLOCKPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["BlockParent"];
const BLOCK_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Block"];
const STATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Statement"];
const TERMINATORLESS_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Terminatorless"];
const COMPLETIONSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["CompletionStatement"];
const CONDITIONAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Conditional"];
const LOOP_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Loop"];
const WHILE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["While"];
const EXPRESSIONWRAPPER_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
const FOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS["For"];
const FORXSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ForXStatement"];
const FUNCTION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Function"];
const FUNCTIONPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FunctionParent"];
const PUREISH_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pureish"];
const DECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Declaration"];
const PATTERNLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["PatternLike"];
const LVAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["LVal"];
const TSENTITYNAME_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSEntityName"];
const LITERAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Literal"];
const IMMUTABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Immutable"];
const USERWHITESPACABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
const METHOD_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Method"];
const OBJECTMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ObjectMember"];
const PROPERTY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Property"];
const UNARYLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["UnaryLike"];
const PATTERN_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Pattern"];
const CLASS_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Class"];
const MODULEDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ModuleDeclaration"];
const EXPORTDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
const MODULESPECIFIER_TYPES = _definitions.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
const PRIVATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Private"];
const FLOW_TYPES = _definitions.FLIPPED_ALIAS_KEYS["Flow"];
const FLOWTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowType"];
const FLOWBASEANNOTATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
const FLOWDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
const FLOWPREDICATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["FlowPredicate"];
const ENUMBODY_TYPES = _definitions.FLIPPED_ALIAS_KEYS["EnumBody"];
const ENUMMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS["EnumMember"];
const JSX_TYPES = _definitions.FLIPPED_ALIAS_KEYS["JSX"];
const TSTYPEELEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSTypeElement"];
const TSTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSType"];
const TSBASETYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS["TSBaseType"];
export { EXPRESSION_TYPES, BINARY_TYPES, SCOPABLE_TYPES, BLOCKPARENT_TYPES, BLOCK_TYPES, STATEMENT_TYPES, TERMINATORLESS_TYPES, COMPLETIONSTATEMENT_TYPES, CONDITIONAL_TYPES, LOOP_TYPES, WHILE_TYPES, EXPRESSIONWRAPPER_TYPES, FOR_TYPES, FORXSTATEMENT_TYPES, FUNCTION_TYPES, FUNCTIONPARENT_TYPES, PUREISH_TYPES, DECLARATION_TYPES, PATTERNLIKE_TYPES, LVAL_TYPES, TSENTITYNAME_TYPES, LITERAL_TYPES, IMMUTABLE_TYPES, USERWHITESPACABLE_TYPES, METHOD_TYPES, OBJECTMEMBER_TYPES, PROPERTY_TYPES, UNARYLIKE_TYPES, PATTERN_TYPES, CLASS_TYPES, MODULEDECLARATION_TYPES, EXPORTDECLARATION_TYPES, MODULESPECIFIER_TYPES, PRIVATE_TYPES, FLOW_TYPES, FLOWTYPE_TYPES, FLOWBASEANNOTATION_TYPES, FLOWDECLARATION_TYPES, FLOWPREDICATE_TYPES, ENUMBODY_TYPES, ENUMMEMBER_TYPES, JSX_TYPES, TSTYPEELEMENT_TYPES, TSTYPE_TYPES, TSBASETYPE_TYPES };